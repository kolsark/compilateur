State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LT shift to state 96
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement shift to state 156
-- On program shift to state 157
-- On main shift to state 159
## Reductions:

State 1:
## Known stack suffix:
## PRINT
## LR(1) items:
statement -> PRINT . LPAR expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On LPAR shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
statement -> PRINT LPAR . expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 92
-- On base_expression shift to state 29
## Reductions:

State 3:
## Known stack suffix:
## USUB
## LR(1) items:
expression -> USUB . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 91
-- On base_expression shift to state 29
## Reductions:

State 4:
## Known stack suffix:
## TAIL
## LR(1) items:
expression -> TAIL . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 90
-- On base_expression shift to state 29
## Reductions:

State 5:
## Known stack suffix:
## SIN
## LR(1) items:
expression -> SIN . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 89
-- On base_expression shift to state 29
## Reductions:

State 6:
## Known stack suffix:
## POS
## LR(1) items:
base_expression -> POS . LPAR expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On LPAR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## POS LPAR
## LR(1) items:
base_expression -> POS LPAR . expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 85
-- On base_expression shift to state 29
## Reductions:

State 8:
## Known stack suffix:
## POINT
## LR(1) items:
base_expression -> POINT . LPAR expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On LPAR shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## POINT LPAR
## LR(1) items:
base_expression -> POINT LPAR . expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 81
-- On base_expression shift to state 29
## Reductions:

State 10:
## Known stack suffix:
## PI
## LR(1) items:
base_expression -> PI . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> PI

State 11:
## Known stack suffix:
## NOT
## LR(1) items:
expression -> NOT . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 80
-- On base_expression shift to state 29
## Reductions:

State 12:
## Known stack suffix:
## LPAR
## LR(1) items:
base_expression -> LPAR . expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 78
-- On base_expression shift to state 29
## Reductions:

State 13:
## Known stack suffix:
## LCUR
## LR(1) items:
base_expression -> LCUR . expression_list RCUR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression_list shift to state 73
-- On expression shift to state 75
-- On base_expression shift to state 29
## Reductions:
-- On RCUR
--   reduce production expression_list ->

State 14:
## Known stack suffix:
## INT
## LR(1) items:
base_expression -> INT . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> INT

State 15:
## Known stack suffix:
## ID
## LR(1) items:
base_expression -> ID . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> ID

State 16:
## Known stack suffix:
## HEAD
## LR(1) items:
expression -> HEAD . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 72
-- On base_expression shift to state 29
## Reductions:

State 17:
## Known stack suffix:
## FLOOR
## LR(1) items:
expression -> FLOOR . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 71
-- On base_expression shift to state 29
## Reductions:

State 18:
## Known stack suffix:
## FLOAT_OF_INT
## LR(1) items:
expression -> FLOAT_OF_INT . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 70
-- On base_expression shift to state 29
## Reductions:

State 19:
## Known stack suffix:
## FLOAT
## LR(1) items:
base_expression -> FLOAT . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> FLOAT

State 20:
## Known stack suffix:
## COS
## LR(1) items:
expression -> COS . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 69
-- On base_expression shift to state 29
## Reductions:

State 21:
## Known stack suffix:
## COLOR
## LR(1) items:
base_expression -> COLOR . LPAR expression COMMA expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On LPAR shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## COLOR LPAR
## LR(1) items:
base_expression -> COLOR LPAR . expression COMMA expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 24
-- On base_expression shift to state 29
## Reductions:

State 23:
## Known stack suffix:
## BOOL_LITERAL
## LR(1) items:
base_expression -> BOOL_LITERAL . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> BOOL_LITERAL

State 24:
## Known stack suffix:
## COLOR LPAR expression
## LR(1) items:
base_expression -> COLOR LPAR expression . COMMA expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 64
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 25:
## Known stack suffix:
## expression SUB
## LR(1) items:
expression -> expression SUB . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 26
-- On base_expression shift to state 29
## Reductions:

State 26:
## Known stack suffix:
## expression SUB expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression SUB expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> expression SUB expression

State 27:
## Known stack suffix:
## expression MUL
## LR(1) items:
expression -> expression MUL . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 28
-- On base_expression shift to state 29
## Reductions:

State 28:
## Known stack suffix:
## expression MUL expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression MUL expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> expression MUL expression

State 29:
## Known stack suffix:
## base_expression
## LR(1) items:
expression -> base_expression . DOT field_accessor [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> base_expression . CONS cons_expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> base_expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 30
-- On CONS shift to state 39
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> base_expression

State 30:
## Known stack suffix:
## base_expression DOT
## LR(1) items:
expression -> base_expression DOT . field_accessor [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On Y shift to state 31
-- On X shift to state 32
-- On RED shift to state 33
-- On POS shift to state 34
-- On GREEN shift to state 35
-- On COLOR shift to state 36
-- On BLUE shift to state 37
-- On field_accessor shift to state 38
## Reductions:

State 31:
## Known stack suffix:
## Y
## LR(1) items:
field_accessor -> Y . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> Y

State 32:
## Known stack suffix:
## X
## LR(1) items:
field_accessor -> X . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> X

State 33:
## Known stack suffix:
## RED
## LR(1) items:
field_accessor -> RED . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> RED

State 34:
## Known stack suffix:
## POS
## LR(1) items:
field_accessor -> POS . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> POS

State 35:
## Known stack suffix:
## GREEN
## LR(1) items:
field_accessor -> GREEN . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> GREEN

State 36:
## Known stack suffix:
## COLOR
## LR(1) items:
field_accessor -> COLOR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> COLOR

State 37:
## Known stack suffix:
## BLUE
## LR(1) items:
field_accessor -> BLUE . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production field_accessor -> BLUE

State 38:
## Known stack suffix:
## base_expression DOT field_accessor
## LR(1) items:
expression -> base_expression DOT field_accessor . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> base_expression DOT field_accessor

State 39:
## Known stack suffix:
## base_expression CONS
## LR(1) items:
expression -> base_expression CONS . cons_expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On FLOAT shift to state 19
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On cons_expression shift to state 40
-- On base_expression shift to state 41
## Reductions:

State 40:
## Known stack suffix:
## base_expression CONS cons_expression
## LR(1) items:
expression -> base_expression CONS cons_expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> base_expression CONS cons_expression

State 41:
## Known stack suffix:
## base_expression
## LR(1) items:
cons_expression -> base_expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production cons_expression -> base_expression

State 42:
## Known stack suffix:
## expression MOD
## LR(1) items:
expression -> expression MOD . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 43
-- On base_expression shift to state 29
## Reductions:

State 43:
## Known stack suffix:
## expression MOD expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression MOD expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> expression MOD expression

State 44:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 45
-- On base_expression shift to state 29
## Reductions:

State 45:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression DIV expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> expression DIV expression

State 46:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 47
-- On base_expression shift to state 29
## Reductions:

State 47:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression OR expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR LIST INT_TYP IF FOREACH FOR FLOAT_TYP DRAW COPY COMMA COLOR BOOL_TYP BEGIN
--   reduce production expression -> expression OR expression

State 48:
## Known stack suffix:
## expression NE
## LR(1) items:
expression -> expression NE . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 49
-- On base_expression shift to state 29
## Reductions:

State 49:
## Known stack suffix:
## expression NE expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression NE expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LIST INT_TYP IF FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression NE expression

State 50:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 51
-- On base_expression shift to state 29
## Reductions:

State 51:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression LT expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression LT expression

State 52:
## Known stack suffix:
## expression ADD
## LR(1) items:
expression -> expression ADD . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 53
-- On base_expression shift to state 29
## Reductions:

State 53:
## Known stack suffix:
## expression ADD expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression ADD expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> expression ADD expression

State 54:
## Known stack suffix:
## expression LE
## LR(1) items:
expression -> expression LE . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 55
-- On base_expression shift to state 29
## Reductions:

State 55:
## Known stack suffix:
## expression LE expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression LE expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression LE expression

State 56:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 57
-- On base_expression shift to state 29
## Reductions:

State 57:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression GT expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression GT expression

State 58:
## Known stack suffix:
## expression GE
## LR(1) items:
expression -> expression GE . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 59
-- On base_expression shift to state 29
## Reductions:

State 59:
## Known stack suffix:
## expression GE expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression GE expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression GE expression

State 60:
## Known stack suffix:
## expression EQ
## LR(1) items:
expression -> expression EQ . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 61
-- On base_expression shift to state 29
## Reductions:

State 61:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression EQ expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR NE LIST INT_TYP IF FOREACH FOR FLOAT_TYP EQ DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression EQ expression

State 62:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 63
-- On base_expression shift to state 29
## Reductions:

State 63:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression AND expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On ADD shift to state 52
## Reductions:
-- On TO STEP RPAR RCUR PRINT POS POINT OR LIST INT_TYP IF FOREACH FOR FLOAT_TYP DRAW COPY COMMA COLOR BOOL_TYP BEGIN AND
--   reduce production expression -> expression AND expression

State 64:
## Known stack suffix:
## COLOR LPAR expression COMMA
## LR(1) items:
base_expression -> COLOR LPAR expression COMMA . expression COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 65
-- On base_expression shift to state 29
## Reductions:

State 65:
## Known stack suffix:
## COLOR LPAR expression COMMA expression
## LR(1) items:
base_expression -> COLOR LPAR expression COMMA expression . COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 66
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 66:
## Known stack suffix:
## COLOR LPAR expression COMMA expression COMMA
## LR(1) items:
base_expression -> COLOR LPAR expression COMMA expression COMMA . expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 67
-- On base_expression shift to state 29
## Reductions:

State 67:
## Known stack suffix:
## COLOR LPAR expression COMMA expression COMMA expression
## LR(1) items:
base_expression -> COLOR LPAR expression COMMA expression COMMA expression . RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 68
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 68:
## Known stack suffix:
## COLOR LPAR expression COMMA expression COMMA expression RPAR
## LR(1) items:
base_expression -> COLOR LPAR expression COMMA expression COMMA expression RPAR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> COLOR LPAR expression COMMA expression COMMA expression RPAR

State 69:
## Known stack suffix:
## COS expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> COS expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> COS expression

State 70:
## Known stack suffix:
## FLOAT_OF_INT expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> FLOAT_OF_INT expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> FLOAT_OF_INT expression

State 71:
## Known stack suffix:
## FLOOR expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> FLOOR expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> FLOOR expression

State 72:
## Known stack suffix:
## HEAD expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> HEAD expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> HEAD expression

State 73:
## Known stack suffix:
## LCUR expression_list
## LR(1) items:
base_expression -> LCUR expression_list . RCUR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On RCUR shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## LCUR expression_list RCUR
## LR(1) items:
base_expression -> LCUR expression_list RCUR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> LCUR expression_list RCUR

State 75:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB RCUR OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression_list -> expression . [ RCUR ]
expression_list -> expression . COMMA expression_list [ RCUR ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 76
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:
-- On RCUR
--   reduce production expression_list -> expression

State 76:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression_list -> expression COMMA . expression_list [ RCUR ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression_list shift to state 77
-- On expression shift to state 75
-- On base_expression shift to state 29
## Reductions:
-- On RCUR
--   reduce production expression_list ->

State 77:
## Known stack suffix:
## expression COMMA expression_list
## LR(1) items:
expression_list -> expression COMMA expression_list . [ RCUR ]
## Transitions:
## Reductions:
-- On RCUR
--   reduce production expression_list -> expression COMMA expression_list

State 78:
## Known stack suffix:
## LPAR expression
## LR(1) items:
base_expression -> LPAR expression . RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 79
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 79:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
base_expression -> LPAR expression RPAR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> LPAR expression RPAR

State 80:
## Known stack suffix:
## NOT expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> NOT expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> NOT expression

State 81:
## Known stack suffix:
## POINT LPAR expression
## LR(1) items:
base_expression -> POINT LPAR expression . COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 82
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 82:
## Known stack suffix:
## POINT LPAR expression COMMA
## LR(1) items:
base_expression -> POINT LPAR expression COMMA . expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 83
-- On base_expression shift to state 29
## Reductions:

State 83:
## Known stack suffix:
## POINT LPAR expression COMMA expression
## LR(1) items:
base_expression -> POINT LPAR expression COMMA expression . RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 84
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 84:
## Known stack suffix:
## POINT LPAR expression COMMA expression RPAR
## LR(1) items:
base_expression -> POINT LPAR expression COMMA expression RPAR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> POINT LPAR expression COMMA expression RPAR

State 85:
## Known stack suffix:
## POS LPAR expression
## LR(1) items:
base_expression -> POS LPAR expression . COMMA expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 86
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 86:
## Known stack suffix:
## POS LPAR expression COMMA
## LR(1) items:
base_expression -> POS LPAR expression COMMA . expression RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 87
-- On base_expression shift to state 29
## Reductions:

State 87:
## Known stack suffix:
## POS LPAR expression COMMA expression
## LR(1) items:
base_expression -> POS LPAR expression COMMA expression . RPAR [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 88
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 88:
## Known stack suffix:
## POS LPAR expression COMMA expression RPAR
## LR(1) items:
base_expression -> POS LPAR expression COMMA expression RPAR . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DOT DIV COPY CONS COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production base_expression -> POS LPAR expression COMMA expression RPAR

State 89:
## Known stack suffix:
## SIN expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> SIN expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> SIN expression

State 90:
## Known stack suffix:
## TAIL expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> TAIL expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> TAIL expression

State 91:
## Known stack suffix:
## USUB expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
expression -> USUB expression . [ TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP RPAR RCUR PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COMMA COLOR BOOL_TYP BEGIN AND ADD
--   reduce production expression -> USUB expression

State 92:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> PRINT LPAR expression . RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 93
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 93:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
statement -> PRINT LPAR expression RPAR . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> PRINT LPAR expression RPAR

State 94:
## Known stack suffix:
## POS
## LR(1) items:
type_expr -> POS . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> POS

State 95:
## Known stack suffix:
## POINT
## LR(1) items:
type_expr -> POINT . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> POINT

State 96:
## Known stack suffix:
## LT
## LR(1) items:
program -> LT . argument_list GT statement [ EOF ]
## Transitions:
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On FLOAT_TYP shift to state 100
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On type_expr shift to state 105
-- On argument_list shift to state 109
-- On argument shift to state 153
## Reductions:
-- On GT
--   reduce production argument_list ->

State 97:
## Known stack suffix:
## LIST
## LR(1) items:
type_expr -> LIST . LPAR type_expr RPAR [ RPAR LPAR ]
## Transitions:
-- On LPAR shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## LIST LPAR
## LR(1) items:
type_expr -> LIST LPAR . type_expr RPAR [ RPAR LPAR ]
## Transitions:
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On FLOAT_TYP shift to state 100
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On type_expr shift to state 103
## Reductions:

State 99:
## Known stack suffix:
## INT_TYP
## LR(1) items:
type_expr -> INT_TYP . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> INT_TYP

State 100:
## Known stack suffix:
## FLOAT_TYP
## LR(1) items:
type_expr -> FLOAT_TYP . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> FLOAT_TYP

State 101:
## Known stack suffix:
## COLOR
## LR(1) items:
type_expr -> COLOR . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> COLOR

State 102:
## Known stack suffix:
## BOOL_TYP
## LR(1) items:
type_expr -> BOOL_TYP . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> BOOL_TYP

State 103:
## Known stack suffix:
## LIST LPAR type_expr
## LR(1) items:
type_expr -> LIST LPAR type_expr . RPAR [ RPAR LPAR ]
## Transitions:
-- On RPAR shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LIST LPAR type_expr RPAR
## LR(1) items:
type_expr -> LIST LPAR type_expr RPAR . [ RPAR LPAR ]
## Transitions:
## Reductions:
-- On RPAR LPAR
--   reduce production type_expr -> LIST LPAR type_expr RPAR

State 105:
## Known stack suffix:
## type_expr
## LR(1) items:
argument -> type_expr . LPAR ID RPAR [ SEMICOLON GT ]
## Transitions:
-- On LPAR shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## type_expr LPAR
## LR(1) items:
argument -> type_expr LPAR . ID RPAR [ SEMICOLON GT ]
## Transitions:
-- On ID shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## type_expr LPAR ID
## LR(1) items:
argument -> type_expr LPAR ID . RPAR [ SEMICOLON GT ]
## Transitions:
-- On RPAR shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## type_expr LPAR ID RPAR
## LR(1) items:
argument -> type_expr LPAR ID RPAR . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production argument -> type_expr LPAR ID RPAR

State 109:
## Known stack suffix:
## LT argument_list
## LR(1) items:
program -> LT argument_list . GT statement [ EOF ]
## Transitions:
-- On GT shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## LT argument_list GT
## LR(1) items:
program -> LT argument_list GT . statement [ EOF ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement shift to state 152
## Reductions:

State 111:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . LPAR expression RPAR statement ELSE statement [ SEMICOLON EOF END ELSE ]
statement -> IF . LPAR expression RPAR statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On LPAR shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## IF LPAR
## LR(1) items:
statement -> IF LPAR . expression RPAR statement ELSE statement [ SEMICOLON EOF END ELSE ]
statement -> IF LPAR . expression RPAR statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 113
-- On base_expression shift to state 29
## Reductions:

State 113:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> IF LPAR expression . RPAR statement ELSE statement [ SEMICOLON EOF END ELSE ]
statement -> IF LPAR expression . RPAR statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 114
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 114:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
statement -> IF LPAR expression RPAR . statement ELSE statement [ SEMICOLON EOF END ELSE ]
statement -> IF LPAR expression RPAR . statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement shift to state 149
## Reductions:

State 115:
## Known stack suffix:
## FOREACH
## LR(1) items:
statement -> FOREACH . ID IN expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On ID shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## FOREACH ID
## LR(1) items:
statement -> FOREACH ID . IN expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On IN shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## FOREACH ID IN
## LR(1) items:
statement -> FOREACH ID IN . expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 118
-- On base_expression shift to state 29
## Reductions:

State 118:
## Known stack suffix:
## FOREACH ID IN expression
## LR(1) items:
expression -> expression . ADD expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
statement -> FOREACH ID IN expression . statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LIST shift to state 97
-- On LE shift to state 54
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On GT shift to state 56
-- On GE shift to state 58
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On EQ shift to state 60
-- On DRAW shift to state 127
-- On DIV shift to state 44
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On AND shift to state 62
-- On ADD shift to state 52
-- On type_expr shift to state 138
-- On statement shift to state 148
## Reductions:

State 119:
## Known stack suffix:
## FOR
## LR(1) items:
statement -> FOR . ID FROM expression TO expression STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On ID shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## FOR ID
## LR(1) items:
statement -> FOR ID . FROM expression TO expression STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On FROM shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## FOR ID FROM
## LR(1) items:
statement -> FOR ID FROM . expression TO expression STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 122
-- On base_expression shift to state 29
## Reductions:

State 122:
## Known stack suffix:
## FOR ID FROM expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> FOR ID FROM expression . TO expression STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On TO shift to state 123
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 123:
## Known stack suffix:
## FOR ID FROM expression TO
## LR(1) items:
statement -> FOR ID FROM expression TO . expression STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 124
-- On base_expression shift to state 29
## Reductions:

State 124:
## Known stack suffix:
## FOR ID FROM expression TO expression
## LR(1) items:
expression -> expression . ADD expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> FOR ID FROM expression TO expression . STEP expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On STEP shift to state 125
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 125:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP
## LR(1) items:
statement -> FOR ID FROM expression TO expression STEP . expression statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 126
-- On base_expression shift to state 29
## Reductions:

State 126:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP expression
## LR(1) items:
expression -> expression . ADD expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . SUB expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MUL expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . DIV expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . MOD expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . AND expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . OR expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . EQ expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . NE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LT expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GT expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . LE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
expression -> expression . GE expression [ SUB PRINT POS POINT OR NE MUL MOD LT LIST LE INT_TYP IF GT GE FOREACH FOR FLOAT_TYP EQ DRAW DIV COPY COLOR BOOL_TYP BEGIN AND ADD ]
statement -> FOR ID FROM expression TO expression STEP expression . statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LIST shift to state 97
-- On LE shift to state 54
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On GT shift to state 56
-- On GE shift to state 58
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On EQ shift to state 60
-- On DRAW shift to state 127
-- On DIV shift to state 44
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On AND shift to state 62
-- On ADD shift to state 52
-- On type_expr shift to state 138
-- On statement shift to state 147
## Reductions:

State 127:
## Known stack suffix:
## DRAW
## LR(1) items:
statement -> DRAW . LPAR expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On LPAR shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## DRAW LPAR
## LR(1) items:
statement -> DRAW LPAR . expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 129
-- On base_expression shift to state 29
## Reductions:

State 129:
## Known stack suffix:
## DRAW LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> DRAW LPAR expression . RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 130
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 130:
## Known stack suffix:
## DRAW LPAR expression RPAR
## LR(1) items:
statement -> DRAW LPAR expression RPAR . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> DRAW LPAR expression RPAR

State 131:
## Known stack suffix:
## COPY
## LR(1) items:
statement -> COPY . LPAR expression COMMA expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On LPAR shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## COPY LPAR
## LR(1) items:
statement -> COPY LPAR . expression COMMA expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 133
-- On base_expression shift to state 29
## Reductions:

State 133:
## Known stack suffix:
## COPY LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DIV COMMA AND ADD ]
statement -> COPY LPAR expression . COMMA expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On COMMA shift to state 134
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 134:
## Known stack suffix:
## COPY LPAR expression COMMA
## LR(1) items:
statement -> COPY LPAR expression COMMA . expression RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On USUB shift to state 3
-- On TAIL shift to state 4
-- On SIN shift to state 5
-- On POS shift to state 6
-- On POINT shift to state 8
-- On PI shift to state 10
-- On NOT shift to state 11
-- On LPAR shift to state 12
-- On LCUR shift to state 13
-- On INT shift to state 14
-- On ID shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR shift to state 21
-- On BOOL_LITERAL shift to state 23
-- On expression shift to state 135
-- On base_expression shift to state 29
## Reductions:

State 135:
## Known stack suffix:
## COPY LPAR expression COMMA expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . MOD expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . NE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR OR NE MUL MOD LT LE GT GE EQ DIV AND ADD ]
statement -> COPY LPAR expression COMMA expression . RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On SUB shift to state 25
-- On RPAR shift to state 136
-- On OR shift to state 46
-- On NE shift to state 48
-- On MUL shift to state 27
-- On MOD shift to state 42
-- On LT shift to state 50
-- On LE shift to state 54
-- On GT shift to state 56
-- On GE shift to state 58
-- On EQ shift to state 60
-- On DIV shift to state 44
-- On AND shift to state 62
-- On ADD shift to state 52
## Reductions:

State 136:
## Known stack suffix:
## COPY LPAR expression COMMA expression RPAR
## LR(1) items:
statement -> COPY LPAR expression COMMA expression RPAR . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> COPY LPAR expression COMMA expression RPAR

State 137:
## Known stack suffix:
## BEGIN
## LR(1) items:
statement -> BEGIN . statement_list END [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement_list shift to state 142
-- On statement shift to state 144
## Reductions:

State 138:
## Known stack suffix:
## type_expr
## LR(1) items:
statement -> type_expr . LPAR ID RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On LPAR shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## type_expr LPAR
## LR(1) items:
statement -> type_expr LPAR . ID RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On ID shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## type_expr LPAR ID
## LR(1) items:
statement -> type_expr LPAR ID . RPAR [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On RPAR shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## type_expr LPAR ID RPAR
## LR(1) items:
statement -> type_expr LPAR ID RPAR . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> type_expr LPAR ID RPAR

State 142:
## Known stack suffix:
## BEGIN statement_list
## LR(1) items:
statement -> BEGIN statement_list . END [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On END shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## BEGIN statement_list END
## LR(1) items:
statement -> BEGIN statement_list END . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> BEGIN statement_list END

State 144:
## Known stack suffix:
## statement
## LR(1) items:
statement_list -> statement . SEMICOLON statement_list [ END ]
statement_list -> statement . [ END ]
## Transitions:
-- On SEMICOLON shift to state 145
## Reductions:
-- On END
--   reduce production statement_list -> statement

State 145:
## Known stack suffix:
## statement SEMICOLON
## LR(1) items:
statement_list -> statement SEMICOLON . statement_list [ END ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement_list shift to state 146
-- On statement shift to state 144
## Reductions:

State 146:
## Known stack suffix:
## statement SEMICOLON statement_list
## LR(1) items:
statement_list -> statement SEMICOLON statement_list . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production statement_list -> statement SEMICOLON statement_list

State 147:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP expression statement
## LR(1) items:
statement -> FOR ID FROM expression TO expression STEP expression statement . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> FOR ID FROM expression TO expression STEP expression statement

State 148:
## Known stack suffix:
## FOREACH ID IN expression statement
## LR(1) items:
statement -> FOREACH ID IN expression statement . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> FOREACH ID IN expression statement

State 149:
## Known stack suffix:
## IF LPAR expression RPAR statement
## LR(1) items:
statement -> IF LPAR expression RPAR statement . ELSE statement [ SEMICOLON EOF END ELSE ]
statement -> IF LPAR expression RPAR statement . [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On ELSE shift to state 150
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> IF LPAR expression RPAR statement
** Conflict on ELSE

State 150:
## Known stack suffix:
## IF LPAR expression RPAR statement ELSE
## LR(1) items:
statement -> IF LPAR expression RPAR statement ELSE . statement [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On PRINT shift to state 1
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On IF shift to state 111
-- On FOREACH shift to state 115
-- On FOR shift to state 119
-- On FLOAT_TYP shift to state 100
-- On DRAW shift to state 127
-- On COPY shift to state 131
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On BEGIN shift to state 137
-- On type_expr shift to state 138
-- On statement shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## IF LPAR expression RPAR statement ELSE statement
## LR(1) items:
statement -> IF LPAR expression RPAR statement ELSE statement . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production statement -> IF LPAR expression RPAR statement ELSE statement

State 152:
## Known stack suffix:
## LT argument_list GT statement
## LR(1) items:
program -> LT argument_list GT statement . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production program -> LT argument_list GT statement

State 153:
## Known stack suffix:
## argument
## LR(1) items:
argument_list -> argument . SEMICOLON argument_list [ GT ]
argument_list -> argument . [ GT ]
## Transitions:
-- On SEMICOLON shift to state 154
## Reductions:
-- On GT
--   reduce production argument_list -> argument

State 154:
## Known stack suffix:
## argument SEMICOLON
## LR(1) items:
argument_list -> argument SEMICOLON . argument_list [ GT ]
## Transitions:
-- On POS shift to state 94
-- On POINT shift to state 95
-- On LIST shift to state 97
-- On INT_TYP shift to state 99
-- On FLOAT_TYP shift to state 100
-- On COLOR shift to state 101
-- On BOOL_TYP shift to state 102
-- On type_expr shift to state 105
-- On argument_list shift to state 155
-- On argument shift to state 153
## Reductions:
-- On GT
--   reduce production argument_list ->

State 155:
## Known stack suffix:
## argument SEMICOLON argument_list
## LR(1) items:
argument_list -> argument SEMICOLON argument_list . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production argument_list -> argument SEMICOLON argument_list

State 156:
## Known stack suffix:
## statement
## LR(1) items:
program -> statement . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production program -> statement

State 157:
## Known stack suffix:
## program
## LR(1) items:
main -> program . EOF [ # ]
## Transitions:
-- On EOF shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## program EOF
## LR(1) items:
main -> program EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> program EOF

State 159:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

