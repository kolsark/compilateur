
** Conflict (reduce/reduce) in state 86.
** Tokens involved: TAIL SUB SIN POS POINT NOT LCUR INT ID HEAD FLOOR FLOAT_OF_INT FLOAT COS COLOR BOOL_LITERAL
** The following explanations concentrate on token TAIL.
** This state is reached from main after reading:

argument_list COPY expression SUB

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
program EOF 
argument_list statement 
              (?)

** In state 86, looking ahead at TAIL, reducing production
** binary_operator -> SUB
** is permitted because of the following sub-derivation:

COPY expression expression SEMICOLON 
     expression binary_operator expression // lookahead token appears because expression can begin with TAIL
                SUB . 

** In state 86, looking ahead at TAIL, reducing production
** unary_operator -> SUB
** is permitted because of the following sub-derivation:

COPY expression expression SEMICOLON 
                unary_operator expression // lookahead token appears because expression can begin with TAIL
                SUB . 

** Conflict (shift/reduce) in state 65.
** Tokens involved: SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

argument_list COPY expression binary_operator expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
program EOF 
argument_list statement 
              (?)

** In state 65, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

COPY expression expression SEMICOLON 
     expression binary_operator expression 
                                expression binary_operator expression 
                                           . SUB 

** In state 65, looking ahead at SUB, reducing production
** expression -> expression binary_operator expression
** is permitted because of the following sub-derivation:

COPY expression expression SEMICOLON // lookahead token appears because expression can begin with SUB
     expression binary_operator expression . 

** Conflict (shift/reduce) in state 61.
** Tokens involved: SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

argument_list COPY expression CONS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
program EOF 
argument_list statement 
              (?)

** In state 61, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

COPY expression expression SEMICOLON 
     expression CONS expression 
                     expression binary_operator expression 
                                . SUB 

** In state 61, looking ahead at SUB, reducing production
** expression -> expression CONS expression
** is permitted because of the following sub-derivation:

COPY expression expression SEMICOLON // lookahead token appears because expression can begin with SUB
     expression CONS expression . 

** Conflict (shift/reduce) in state 39.
** Tokens involved: SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

argument_list COPY unary_operator expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
program EOF 
argument_list statement 
              (?)

** In state 39, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

COPY expression expression SEMICOLON 
     unary_operator expression 
                    expression binary_operator expression 
                               . SUB 

** In state 39, looking ahead at SUB, reducing production
** expression -> unary_operator expression
** is permitted because of the following sub-derivation:

COPY expression expression SEMICOLON // lookahead token appears because expression can begin with SUB
     unary_operator expression . 
