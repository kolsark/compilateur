# 2 "parser/Lexer.mll"
 
    open Parser
    exception Error of string

# 7 "parser/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\190\255\084\000\192\255\161\000\001\000\196\255\197\255\
    \198\255\199\255\200\255\201\255\171\000\005\000\003\000\013\000\
    \209\255\210\255\212\255\213\255\214\255\216\255\217\255\026\000\
    \023\000\124\000\011\000\015\000\022\000\129\000\027\000\015\000\
    \035\000\016\000\033\000\133\000\135\000\132\000\036\000\252\255\
    \253\255\039\000\254\255\002\000\255\255\047\000\251\255\037\000\
    \058\000\073\000\072\000\068\000\250\255\079\000\249\255\100\000\
    \248\255\218\255\129\000\119\000\136\000\247\255\134\000\219\255\
    \134\000\134\000\139\000\143\000\137\000\152\000\246\255\157\000\
    \141\000\143\000\000\000\149\000\159\000\001\000\157\000\153\000\
    \148\000\238\255\237\255\164\000\169\000\168\000\165\000\235\255\
    \161\000\234\255\163\000\243\255\151\000\162\000\160\000\245\255\
    \244\255\179\000\158\000\242\255\179\000\165\000\180\000\241\255\
    \240\255\181\000\182\000\174\000\233\255\188\000\186\000\232\255\
    \171\000\231\255\229\255\173\000\173\000\228\255\174\000\227\255\
    \226\255\215\255\186\000\187\000\224\255\183\000\178\000\225\255\
    \185\000\180\000\223\255\197\000\222\255\197\000\189\000\221\255\
    \188\000\220\255\207\255\208\255\206\255\203\255\255\000\195\255\
    \058\000\035\001\253\255\030\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\064\000\255\255\062\000\065\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\053\000\065\000\051\000\050\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \255\255\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\019\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\061\000\255\255\
    \255\255\255\255\255\255\002\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\000\000\255\255\144\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\043\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \144\000\146\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\039\000\000\000\044\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\005\000\143\000\000\000\017\000\000\000\000\000\
    \009\000\008\000\018\000\020\000\011\000\019\000\012\000\041\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\013\000\010\000\015\000\016\000\014\000\141\000\
    \140\000\038\000\037\000\034\000\033\000\032\000\035\000\031\000\
    \030\000\029\000\138\000\139\000\028\000\149\000\027\000\026\000\
    \025\000\042\000\024\000\023\000\036\000\000\000\043\000\000\000\
    \022\000\021\000\000\000\007\000\143\000\006\000\000\000\075\000\
    \078\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\131\000\120\000\118\000\115\000\
    \109\000\105\000\097\000\134\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\133\000\101\000\
    \090\000\100\000\045\000\046\000\055\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\053\000\
    \050\000\051\000\052\000\002\000\054\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\142\000\
    \056\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\121\000\067\000\113\000\
    \058\000\049\000\062\000\123\000\060\000\061\000\122\000\112\000\
    \048\000\066\000\063\000\047\000\065\000\088\000\057\000\064\000\
    \083\000\059\000\071\000\068\000\069\000\070\000\073\000\082\000\
    \003\000\255\255\255\255\074\000\076\000\077\000\079\000\080\000\
    \081\000\084\000\085\000\086\000\072\000\087\000\089\000\093\000\
    \096\000\094\000\095\000\092\000\098\000\099\000\091\000\104\000\
    \102\000\103\000\106\000\107\000\108\000\110\000\111\000\114\000\
    \116\000\117\000\119\000\128\000\125\000\126\000\127\000\129\000\
    \130\000\132\000\136\000\135\000\137\000\148\000\124\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\147\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\043\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\005\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\015\000\015\000\000\000\147\000\000\000\000\000\
    \000\000\041\000\000\000\000\000\000\000\255\255\041\000\255\255\
    \000\000\000\000\255\255\000\000\144\000\000\000\255\255\074\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\024\000\026\000\027\000\028\000\
    \030\000\031\000\033\000\023\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\023\000\032\000\
    \034\000\032\000\038\000\045\000\047\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\048\000\
    \049\000\050\000\051\000\002\000\053\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\004\000\
    \055\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\025\000\035\000\029\000\
    \036\000\037\000\058\000\025\000\059\000\060\000\025\000\029\000\
    \037\000\035\000\062\000\037\000\035\000\064\000\036\000\035\000\
    \065\000\036\000\066\000\067\000\068\000\069\000\071\000\072\000\
    \000\000\005\000\043\000\073\000\075\000\076\000\078\000\079\000\
    \080\000\083\000\084\000\085\000\071\000\086\000\088\000\090\000\
    \092\000\093\000\094\000\090\000\097\000\098\000\090\000\100\000\
    \101\000\102\000\105\000\106\000\107\000\109\000\110\000\112\000\
    \115\000\116\000\118\000\122\000\123\000\125\000\126\000\128\000\
    \129\000\131\000\133\000\134\000\136\000\145\000\123\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\255\255\144\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\145\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\145\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 11 "parser/Lexer.mll"
                          (Lexing.new_line lexbuf; token lexbuf)
# 230 "parser/Lexer.ml"

  | 1 ->
# 12 "parser/Lexer.mll"
                        (commentary lexbuf)
# 235 "parser/Lexer.ml"

  | 2 ->
# 13 "parser/Lexer.mll"
                        (token lexbuf)
# 240 "parser/Lexer.ml"

  | 3 ->
# 14 "parser/Lexer.mll"
                        ( Lexing.new_line lexbuf ; token lexbuf )
# 245 "parser/Lexer.ml"

  | 4 ->
# 15 "parser/Lexer.mll"
                    (AND)
# 250 "parser/Lexer.ml"

  | 5 ->
# 16 "parser/Lexer.mll"
                    (BEGIN)
# 255 "parser/Lexer.ml"

  | 6 ->
# 17 "parser/Lexer.mll"
                    (BLUE)
# 260 "parser/Lexer.ml"

  | 7 ->
# 18 "parser/Lexer.mll"
                    (BOOL_TYP)
# 265 "parser/Lexer.ml"

  | 8 ->
# 19 "parser/Lexer.mll"
                    (BOOL_LITERAL(true))
# 270 "parser/Lexer.ml"

  | 9 ->
# 20 "parser/Lexer.mll"
                    (BOOL_LITERAL(false))
# 275 "parser/Lexer.ml"

  | 10 ->
# 21 "parser/Lexer.mll"
                    (COLOR)
# 280 "parser/Lexer.ml"

  | 11 ->
# 22 "parser/Lexer.mll"
                    (COPY)
# 285 "parser/Lexer.ml"

  | 12 ->
# 23 "parser/Lexer.mll"
                    (COS)
# 290 "parser/Lexer.ml"

  | 13 ->
# 24 "parser/Lexer.mll"
                    (DRAW)
# 295 "parser/Lexer.ml"

  | 14 ->
# 25 "parser/Lexer.mll"
                    (ELSE)
# 300 "parser/Lexer.ml"

  | 15 ->
# 26 "parser/Lexer.mll"
                    (END)
# 305 "parser/Lexer.ml"

  | 16 ->
# 27 "parser/Lexer.mll"
                    (FLOAT_TYP)
# 310 "parser/Lexer.ml"

  | 17 ->
# 28 "parser/Lexer.mll"
                    (FLOAT_OF_INT)
# 315 "parser/Lexer.ml"

  | 18 ->
# 29 "parser/Lexer.mll"
                    (FLOOR)
# 320 "parser/Lexer.ml"

  | 19 ->
# 30 "parser/Lexer.mll"
                    (FOR)
# 325 "parser/Lexer.ml"

  | 20 ->
# 31 "parser/Lexer.mll"
                    (FOREACH)
# 330 "parser/Lexer.ml"

  | 21 ->
# 32 "parser/Lexer.mll"
                    (FROM)
# 335 "parser/Lexer.ml"

  | 22 ->
# 33 "parser/Lexer.mll"
                    (GREEN)
# 340 "parser/Lexer.ml"

  | 23 ->
# 34 "parser/Lexer.mll"
                    (HEAD)
# 345 "parser/Lexer.ml"

  | 24 ->
# 35 "parser/Lexer.mll"
                    (IF)
# 350 "parser/Lexer.ml"

  | 25 ->
# 36 "parser/Lexer.mll"
                    (IN)
# 355 "parser/Lexer.ml"

  | 26 ->
# 37 "parser/Lexer.mll"
                    (INT_TYP)
# 360 "parser/Lexer.ml"

  | 27 ->
# 38 "parser/Lexer.mll"
                    (LIST)
# 365 "parser/Lexer.ml"

  | 28 ->
# 39 "parser/Lexer.mll"
                    (NOT)
# 370 "parser/Lexer.ml"

  | 29 ->
# 40 "parser/Lexer.mll"
                    (OR)
# 375 "parser/Lexer.ml"

  | 30 ->
# 41 "parser/Lexer.mll"
                    (POINT)
# 380 "parser/Lexer.ml"

  | 31 ->
# 42 "parser/Lexer.mll"
                    (POS)
# 385 "parser/Lexer.ml"

  | 32 ->
# 43 "parser/Lexer.mll"
                    (PRINT)
# 390 "parser/Lexer.ml"

  | 33 ->
# 44 "parser/Lexer.mll"
                    (RED)
# 395 "parser/Lexer.ml"

  | 34 ->
# 45 "parser/Lexer.mll"
                    (SIN)
# 400 "parser/Lexer.ml"

  | 35 ->
# 46 "parser/Lexer.mll"
                    (STEP)
# 405 "parser/Lexer.ml"

  | 36 ->
# 47 "parser/Lexer.mll"
                    (TAIL)
# 410 "parser/Lexer.ml"

  | 37 ->
# 48 "parser/Lexer.mll"
                    (TO)
# 415 "parser/Lexer.ml"

  | 38 ->
# 49 "parser/Lexer.mll"
                    (X)
# 420 "parser/Lexer.ml"

  | 39 ->
# 50 "parser/Lexer.mll"
                    (Y)
# 425 "parser/Lexer.ml"

  | 40 ->
# 51 "parser/Lexer.mll"
                    (PI)
# 430 "parser/Lexer.ml"

  | 41 ->
# 52 "parser/Lexer.mll"
                    (ADD)
# 435 "parser/Lexer.ml"

  | 42 ->
# 53 "parser/Lexer.mll"
                    (SUB)
# 440 "parser/Lexer.ml"

  | 43 ->
# 54 "parser/Lexer.mll"
                    (MUL)
# 445 "parser/Lexer.ml"

  | 44 ->
# 55 "parser/Lexer.mll"
                    (DIV)
# 450 "parser/Lexer.ml"

  | 45 ->
# 56 "parser/Lexer.mll"
                    (MOD)
# 455 "parser/Lexer.ml"

  | 46 ->
# 57 "parser/Lexer.mll"
                    (EQ)
# 460 "parser/Lexer.ml"

  | 47 ->
# 58 "parser/Lexer.mll"
                    (NE)
# 465 "parser/Lexer.ml"

  | 48 ->
# 59 "parser/Lexer.mll"
                    (LE)
# 470 "parser/Lexer.ml"

  | 49 ->
# 60 "parser/Lexer.mll"
                    (GE)
# 475 "parser/Lexer.ml"

  | 50 ->
# 61 "parser/Lexer.mll"
                    (LT)
# 480 "parser/Lexer.ml"

  | 51 ->
# 62 "parser/Lexer.mll"
                    (GT)
# 485 "parser/Lexer.ml"

  | 52 ->
# 63 "parser/Lexer.mll"
                    (CONS)
# 490 "parser/Lexer.ml"

  | 53 ->
# 64 "parser/Lexer.mll"
                    (DOT)
# 495 "parser/Lexer.ml"

  | 54 ->
# 65 "parser/Lexer.mll"
                    (COMMA)
# 500 "parser/Lexer.ml"

  | 55 ->
# 66 "parser/Lexer.mll"
                    (SEMICOLON)
# 505 "parser/Lexer.ml"

  | 56 ->
# 67 "parser/Lexer.mll"
                    (LPAR)
# 510 "parser/Lexer.ml"

  | 57 ->
# 68 "parser/Lexer.mll"
                    (RPAR)
# 515 "parser/Lexer.ml"

  | 58 ->
# 69 "parser/Lexer.mll"
                    (LCUR)
# 520 "parser/Lexer.ml"

  | 59 ->
# 70 "parser/Lexer.mll"
                    (RCUR)
# 525 "parser/Lexer.ml"

  | 60 ->
let
# 74 "parser/Lexer.mll"
                         s
# 531 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 74 "parser/Lexer.mll"
                                  ( STRING(s) )
# 535 "parser/Lexer.ml"

  | 61 ->
let
# 75 "parser/Lexer.mll"
                               s
# 541 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 75 "parser/Lexer.mll"
                                 (FLOAT(try float_of_string s with Failure _ -> raise (Error(s)) ))
# 545 "parser/Lexer.ml"

  | 62 ->
let
# 76 "parser/Lexer.mll"
                  s
# 551 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 76 "parser/Lexer.mll"
                        ( INT(try int_of_string s with Failure _ ->(let pos = Lexing.lexeme_start_p lexbuf in raise (Error(Format.sprintf "Line %d, char %d ,Read: '%s'. It is not a valid integer" pos.pos_lnum (pos.pos_cnum - pos.pos_bol +1) s)) )))
# 555 "parser/Lexer.ml"

  | 63 ->
# 77 "parser/Lexer.mll"
                    (EOF)
# 560 "parser/Lexer.ml"

  | 64 ->
let
# 78 "parser/Lexer.mll"
                               s
# 566 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "parser/Lexer.mll"
                                  ( ID(s) )
# 570 "parser/Lexer.ml"

  | 65 ->
let
# 79 "parser/Lexer.mll"
           s
# 576 "parser/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 79 "parser/Lexer.mll"
                    (let pos = Lexing.lexeme_start_p lexbuf in raise (Error(Format.sprintf "Line %d, char %d ,Read: '%c'. It is not an acceptable character" pos.pos_lnum (pos.pos_cnum - pos.pos_bol +1) s)))
# 580 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and commentary lexbuf =
   __ocaml_lex_commentary_rec lexbuf 145
and __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "parser/Lexer.mll"
                    (Lexing.new_line lexbuf; commentary lexbuf)
# 592 "parser/Lexer.ml"

  | 1 ->
# 83 "parser/Lexer.mll"
                    (token lexbuf)
# 597 "parser/Lexer.ml"

  | 2 ->
# 84 "parser/Lexer.mll"
                    (commentary lexbuf)
# 602 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state

;;

